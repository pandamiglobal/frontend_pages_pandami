---
description: PandaMi Landing Page - Visagismo com IA
globs: ["**/*"]
alwaysApply: true
---

# PandaMi - Landing Page Guidelines

This project is a landing page for PandaMi, an online visagism platform with AI. Built using Next.js 15, TailwindCSS 4, and Shadcn UI components.

## 🏗️ Project Architecture

### Core Technologies
- **Next.js 15** with App Router
- **React 19** with TypeScript
- **TailwindCSS 4** for styling
- **Shadcn UI** for components
- **Lucide React** for icons

### Project Structure
```
src/
├── app/                    # Next.js App Router
├── components/             # React components
│   ├── (lp)/              # Landing page specific components
│   ├── sections/          # Page sections
│   ├── ui/                # Shadcn UI components
│   └── seo/               # SEO components (JSON-LD, etc.)
├── common/                # Shared utilities
│   ├── config/            # Configuration files
│   ├── constants/         # Application constants
│   ├── hooks/             # Custom React hooks
│   ├── lib/               # Utility functions
│   └── services/          # API services
└── @types/                # TypeScript type definitions
```

## 🎨 Styling Guidelines

### TailwindCSS Best Practices
- **Always prefer TailwindCSS** over custom CSS
- Use CSS variables from `#file:@/styles/globals.css` for colors
- Maintain visual consistency with utility classes
- Use `neutral` for gray colors (not `gray`)

### Font Configuration
- **Fahkwang** for headings (h1, h2, h3) - globally configured
- **Ubuntu** for body text - globally configured
- **Never** use `font-['Fahkwang']` or `font-['Ubuntu']` in Tailwind classes
- Global font classes are already defined in `#file:globals.css`

## 🧩 Component Development

### Creating New Sections
1. **Use semantic HTML**: Always use `<section>` tag with proper `id`
2. **Container wrapper**: Always wrap content with `<Container>` component
3. **Responsive design**: Consider mobile-first approach
4. **Consistent styling**: Follow existing section patterns
5. **Clear hierarchy**: Use `<h2>` or `<h3>` for section titles

### Component Organization
- **Reusable components**: Create in `src/components/ui/`
- **Page sections**: Create in `src/components/sections/`
- **Landing page specific**: Create in `src/components/(lp)/`
- **SEO components**: Create in `src/components/seo/`

### Button Usage
- **Primary actions**: Use `<PrimaryButton>` component
- **Secondary actions**: Use `<SecondaryButton>` component
- **Consistent styling**: Follow existing button patterns

## 🔧 Code Quality Standards

### TypeScript Guidelines
- **Strong typing**: Avoid `any`, use `unknown` or specific types
- **Readonly arrays**: Use `ReadonlyArray<T>` for immutable data
- **Interface definitions**: Define clear interfaces for props
- **Type safety**: Leverage TypeScript's strict mode

### Performance Optimization
- **Memoization**: Use `useMemo` for expensive calculations
- **Early returns**: Implement early returns for better performance
- **Lazy loading**: Use dynamic imports for large components
- **Bundle optimization**: Keep bundle size minimal

### Clean Code Principles
- **DRY principle**: Don't repeat yourself - use constants
- **Single responsibility**: One component, one purpose
- **Meaningful names**: Use descriptive variable and function names
- **Remove dead code**: Clean up commented code and unused imports

## 📊 Data Management

### Constants Organization
- **Centralized constants**: Use `#file:src/common/constants/index.ts`
- **FAQ data**: Import from constants, don't duplicate
- **Site configuration**: Use `SITE_CONFIG` constant
- **Pricing data**: Use `PRICING_CONFIG` constant

### State Management
- **Local state**: Use `useState` for component state
- **Global state**: Use Zustand for complex state
- **Server state**: Use React Query for API data

## 🔍 SEO & Accessibility

### SEO Implementation
- **JSON-LD structured data**: Use components from `src/components/seo/`
- **Meta tags**: Configure in `#file:src/common/config/default-seo.tsx`
- **Semantic HTML**: Use proper HTML5 semantic elements
- **Schema.org markup**: Implement for rich snippets

### Accessibility Standards
- **ARIA labels**: Add proper ARIA attributes
- **Keyboard navigation**: Ensure keyboard accessibility
- **Screen readers**: Test with screen reader compatibility
- **Color contrast**: Maintain WCAG AA compliance

## 🚀 Development Workflow

### Code Organization
- **Import order**: Group imports logically (React, Next.js, local)
- **File naming**: Use kebab-case for files, PascalCase for components
- **Export patterns**: Use named exports for components
- **Type definitions**: Keep types close to usage

### Error Handling
- **Console logs**: Remove debug logs, keep error logs
- **Error boundaries**: Implement proper error handling
- **Validation**: Validate props and data
- **Fallbacks**: Provide fallback UI for errors

### Testing & Quality
- **Linting**: Use ESLint for code quality
- **Type checking**: Run `tsc --noEmit` for type validation
- **Performance**: Monitor bundle size and performance
- **Accessibility**: Test with accessibility tools

## 📱 Responsive Design

### Breakpoint Strategy
- **Mobile first**: Design for mobile, enhance for desktop
- **Tailwind breakpoints**: Use `sm:`, `md:`, `lg:`, `xl:` prefixes
- **Flexible layouts**: Use CSS Grid and Flexbox
- **Touch targets**: Ensure 44px minimum touch targets

### Icon Usage
- **Lucide React**: Use for UI icons
- **Simple Icons**: Use for brand/social media icons
- **Consistent sizing**: Use standard icon sizes (h-4 w-4, h-6 w-6)
- **Accessibility**: Add proper alt text and ARIA labels

## 🔧 Configuration Files

### Next.js Configuration
- **Image optimization**: Use `remotePatterns` (not deprecated `domains`)
- **Bundle optimization**: Configure webpack for optimal bundles
- **Security headers**: Implement security headers
- **Performance**: Enable compression and caching

### Environment Variables
- **Site URL**: Use `NEXT_PUBLIC_SITE_URL` for absolute URLs
- **API endpoints**: Configure in `#file:src/common/config/api.ts`
- **SEO metadata**: Configure in `#file:src/common/config/default-seo.tsx`

## 📝 Documentation

### Code Documentation
- **JSDoc comments**: Document complex functions
- **README files**: Maintain component documentation
- **Type definitions**: Document interfaces and types
- **Usage examples**: Provide usage examples for components

### Project Documentation
- **Architecture decisions**: Document architectural choices
- **Performance metrics**: Track and document performance
- **SEO implementation**: Document SEO strategies
- **Accessibility compliance**: Document accessibility features

---

**Remember**: Always prioritize code quality, performance, and user experience. Follow these guidelines to maintain consistency and scalability across the project.
